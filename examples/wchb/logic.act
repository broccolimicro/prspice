import "globals.act";

namespace gate
{

export template<pint invert, reset, sz>
defproc buf(globals g; bool a, b)
{
	preal n1 = 1.0*sz;
	preal n2 = 2.0*sz;
	preal p1 = 1.0*sz*PN;
	preal p2 = 2.0*sz;

	pbool reset0 = (reset = RESET_0);
	pbool reset1 = (reset = RESET_1);
	pbool invert0 = (invert = NO_INVERT);
	pbool invert1 = (invert = INVERT);

	bool _b;
	[ reset0 | reset1 ->
		[ reset != invert ->
			prs<g.Vdd, g.GND> {
				 g.sReset     |  a<n1> -> _b-
				~g.sReset<p2> & ~a<p2> -> _b+
			}
		[] reset = invert ->
			prs<g.Vdd, g.GND> {
				 g._sReset<n2> &  a<n2> -> _b-
				~g._sReset     | ~a<p1> -> _b+
			}
		]
	[] ~reset0 & ~reset1 ->
		prs <g.Vdd, g.GND> {
			 a<n1> -> _b-
			~a<p1> -> _b+
		}
  ]

	[  invert0 ->
		prs <g.Vdd, g.GND> {
			 _b<n1> -> b-
			~_b<p1> -> b+
		}
	[] invert1 ->
		b = _b;
	]
}

export template<pint N, invert, reset, sz>
defproc and(globals g; bool a[N], b)
{
	preal n1 = 1.0*sz;
	preal n2 = 2.0*sz;
	preal nA = 1.0*N*sz;
	preal nB = 1.0*(N+1)*sz;
	preal p1 = 1.0*sz*PN;
	preal p2 = 2.0*sz*PN;

	pbool reset0 = (reset = RESET_0);
	pbool reset1 = (reset = RESET_1);
	pbool invert0 = (invert = NO_INVERT);
	pbool invert1 = (invert = INVERT);

	bool _b;
	[ N > 1 ->
		[ reset0 | reset1 ->
			[ reset != invert ->
				prs<g.Vdd, g.GND> {
					 g.sReset     | (&i:N:  a[i]<nA> ) -> _b-
					~g.sReset<p2> & (|i:N: ~a[i]<p2> ) -> _b+
				}
			[] reset = invert ->
				prs<g.Vdd, g.GND> {
					 g._sReset<nB> & (&i:N:  a[i]<nB> ) -> _b-
					~g._sReset     | (|i:N: ~a[i]<p1> ) -> _b+
				}
			]
		[] ~reset0 & ~reset1 ->
			prs <g.Vdd, g.GND> {
				(&i:N:  a[i]<nA> ) -> _b-
				(|i:N: ~a[i]<p1> ) -> _b+
			}
		]

		[  invert = NO_INVERT ->
			prs <g.Vdd, g.GND> {
				 _b<n2> -> b-
				~_b<p2> -> b+
			}
		[] invert = INVERT ->
			b = _b;
		]
	[] N = 1 ->
		[  invert = NO_INVERT ->
			b = a[0];
			prs {} // not a black box
		[] invert = INVERT ->
			prs <g.Vdd, g.GND> {
				 a[0]<n1> -> b-
				~a[0]<p1> -> b+
			}
		]
	]
}

export template <pint N, invert, reset, sz>
defproc or(globals g; bool a[N], b)
{
	preal n1 = 1.0*sz;
	preal n2 = 2.0*sz;
	preal pA = 1.0*N*sz*PN;
	preal pB = 1.0*(N+1)*sz*PN;
	preal p1 = 1.0*sz*PN;
	preal p2 = 2.0*sz*PN;

	pbool reset0 = (reset = RESET_0);
	pbool reset1 = (reset = RESET_1);
	pbool invert0 = (invert = NO_INVERT);
	pbool invert1 = (invert = INVERT);

	[ N > 1 ->
		bool _b;
		[ reset0 | reset1 ->
			[ reset != invert ->
				prs<g.Vdd, g.GND> {
					 g.sReset     | (|i:N:  a[i]<n2> ) -> _b-
					~g.sReset<pB> & (&i:N: ~a[i]<pB> ) -> _b+
				}
			[] reset = invert ->
				prs<g.Vdd, g.GND> {
					 g._sReset<n2> & (|i:N:  a[i]<n2> ) -> _b-
					~g._sReset     | (&i:N: ~a[i]<pA> ) -> _b+
				}
			]
		[] ~reset0 & ~reset1 ->
			prs <g.Vdd, g.GND> {
				(|i:N:  a[i]<n1> ) -> _b-
				(&i:N: ~a[i]<pA> ) -> _b+
			}
		]

		[  invert = NO_INVERT ->
			prs <g.Vdd, g.GND> {
				 _b<n2> -> b-
				~_b<p2> -> b+
			}
		[] invert = INVERT ->
			b = _b;
		]
	[] N = 1 ->
		[  invert = NO_INVERT ->
			b = a[0];
			prs {} // not a black box
		[] invert = INVERT ->
			prs <g.Vdd, g.GND> {
				 a[0]<n1> -> b-
				~a[0]<p1> -> b+
			}
		]
	]
}

export template<pint ND, NU, invert, reset, sz>
defproc acelem_hcta(globals g; bool dn[ND], up[NU], b)
{
	preal n2 = 2.0*sz;
	preal nA = 1.0*ND*sz;
	preal nB = 1.0*(ND+1)*sz;
	preal p2 = 2.0*sz*PN;
	preal pA = 1.0*NU*sz*PN;
	preal pB = 1.0*(NU+1)*sz*PN;

	pbool reset0 = (reset = RESET_0);
	pbool reset1 = (reset = RESET_1);
	pbool invert0 = (invert = NO_INVERT);
	pbool invert1 = (invert = INVERT);

	bool _b;
	[ reset0 | reset1 ->
		[ reset != invert ->
			prs<g.Vdd, g.GND> {
				[comb=1]  g.sReset     | (&i:ND:  dn[i]<nA> ) -> _b-
				[comb=1] ~g.sReset<pB> & (&i:NU: ~up[i]<pB> ) -> _b+
			}
		[] reset = invert ->
			prs<g.Vdd, g.GND> {
				[comb=1]  g._sReset<nB> & (&i:ND:  dn[i]<nB> ) -> _b-
				[comb=1] ~g._sReset     | (&i:NU: ~up[i]<pA> ) -> _b+
			}
		]
	[] ~reset0 & ~reset1 ->
		prs <g.Vdd, g.GND> {
			[comb=1] (&i:ND:  dn[i]<nA> ) -> _b-
			[comb=1] (&i:NU: ~up[i]<pA> ) -> _b+
		}
   	]

	[  invert = NO_INVERT ->
		prs <g.Vdd, g.GND> {
			 _b<n2> -> b-
			~_b<p2> -> b+
		}
	[] invert = INVERT ->
		b = _b;
	]
}

export template<pint ND, NU, invert, reset, sz>
defproc acelem(globals g; bool dn[ND], up[NU], b)
{
	preal n4 = 4.0*sz;
	preal p4 = 4.0*sz*PN;

	[  invert = INVERT ->
		bool _b;
		acelem_hcta<ND, NU, NO_INVERT, 1-reset, sz> subi(g, dn, up, _b);
		prs <g.Vdd, g.GND> {
			 _b<n4> -> b-
			~_b<p4> -> b+
		}
	[] invert = NO_INVERT ->
		acelem_hcta<ND, NU, NO_INVERT, reset, sz> sub(g, dn, up, b);
	]
}


export template<pint N, invert, reset, sz>
defproc celem_hcta(globals g; bool a[N], b)
{
	acelem_hcta<N, N, invert, reset, sz> sub(g, a, a, b);
}

export template<pint N, invert, reset, sz>
defproc celem(globals g; bool a[N], b)
{
	acelem<N, N, invert, reset, sz> sub(g, a, a, b);
}

export template<pint N, invert, reset, sz>
defproc and_tree(globals g; bool a[N], b);

export template<pint N, invert, reset, sz>
defproc or_tree(globals g; bool a[N], b);

export template<pint N, invert, reset, sz>
defproc and_tree(globals g; bool a[N], b)
{
	[  N <= 3 -> and<N, invert, reset, sz> leaf(g, a, b);
	[] N >  3 ->
		pint M = N/2;
		pint M3 = N%2;
		pint M2 = M - M3;

		bool v[M];
		and<2, INVERT, RESET_X, sz> stage2[M2];
		(;i:M2: stage2[i](g, a[2*i..2*i+1], v[i]); )
		[ M3 = 1 -> and<3, INVERT, RESET_X, sz> stage3(g, a[N-3..N-1], v[M-1]); ]
		or_tree<M, 1-invert, reset, sz> root(g, v, b);
	]
}

export template<pint N, invert, reset, sz>
defproc or_tree(globals g; bool a[N], b)
{
	[  N <= 3 -> or<N, invert, reset, sz> leaf(g, a, b);
	[] N >  3 ->
		pint M = N/2;
		pint M3 = N%2;
		pint M2 = M - M3;

		bool v[M];
		or<2, INVERT, RESET_X, sz> stage2[M2];
		(;i:M2: stage2[i](g, a[2*i..2*i+1], v[i]); )
		[ M3 = 1 -> or<3, INVERT, RESET_X, sz> stage3(g, a[N-3..N-1], v[M-1]); ]
		and_tree<M, 1-invert, reset, sz> root(g, v, b);
	]
}


/*
This is a c-element tree with no reset circuitry. Its a recursive structure,
so each recursion, it takes the number of inputs and divides it in half. If the
number is odd, then one side will get one more input. The following is an example 
execution for a 10 input c-element. This structure will have at most one inverter.
Furthermore, 3-input c-elements will only show up in the first column of c-elements.
All the rest will be 2-input. This guarantees that the difference in delay on each
side will be as little as possible. This also guarantees that the total delay will
be as little as possible because there will never be a chain of 3-input c-elements.

0 1 2   3
_
 \
  C
_/ \
_   C
 \ / \
--C   \
_/     \
_       C
 \     /
  C   /
_/ \ /
_   C
 \ /
--C
_/

invert determines whether the output is inverted with respect
to the input. For example, if N is 2 and invert is false, you
will get a single 2-input c-element followed by an inverter.

*/
export template<pint N, invert, reset, sz>
defproc celem_tree_hcta(globals g; bool a[N], b)
{
	[  N <= 3 -> celem_hcta<N, invert, reset, sz> leaf(g, a, b);
	[] N >  3 ->
		pint M = N/2;
		pint M3 = N%2;
		pint M2 = M - M3;

		bool v[M];
		celem_hcta<2, INVERT, RESET_X, sz> stage2[M2];
		(;i:M2: stage2[i](g, a[2*i..2*i+1], v[i]); )
		[ M3 = 1 -> celem_hcta<3, INVERT, RESET_X, sz> stage3(g, a[N-3..N-1], v[M-1]); ]
		celem_tree_hcta<M, 1-invert, reset, sz> root(g, v, b);
	]
}

export template<pint N, invert, reset, sz>
defproc celem_tree(globals g; bool a[N], b)
{
	[  N <= 3 -> celem<N, invert, reset, sz> leaf(g, a, b);
	[] N >  3 ->
		pint subreset;
		[  invert = 0 -> subreset = reset;
		[] invert = 1 -> subreset = 1-reset;
		]

		bool v[2];
		celem_tree<N/2,     NO_INVERT, subreset, sz> left (g, a[0..N/2-1], v[0]);
		celem_tree<N - N/2, NO_INVERT, subreset, sz> right(g, a[N/2..N-1], v[1]);
		celem<2, invert, reset, sz> root(g, v, b);
	]
}

}
